{"tagline":"An effort to bring real threads to PHP5.3+","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"# What is supported ?\r\nAs the name suggests, this extension is based on Posix Threads, as such Windows is unsupported. This will not change, I have no interest in working with the Windows API whatsoever.\r\n\r\n## Project Goal\r\nThe goal of this project is not to implement all of Posix Threads for PHP, but rather to provide PHP with it's own implementation of threading using Posix Threads. The geeks among us might like to see a full implementation of Posix Threads for PHP however I feel and have found that it will be much more useful to provide an implementation of threading that works rather than spending time writing bridges that cannot be crossed.\r\n\r\n## What is required ?\r\nJust this source code and a thread safe version of PHP5.3+\r\n\r\n**Please note: you MUST have a thread safe version of PHP for this to work**\r\n\r\n## What do I need to know ?\r\n```php\r\n<?php\r\nclass HelloWorld extends Thread {\r\n    public function __construct($myvar){\r\n        $this->myvar = $myvar;\r\n    }\r\n    public function run(){\r\n        if($myvar){\r\n            printf(\r\n                \"You passed %s as an argument and this is Thread #%lu\\n\", \r\n                $myvar, Thread::self()\r\n            );\r\n        }\r\n    }\r\n}\r\n$thread = new HelloWorld(\"Threading 101\");\r\nif($thread->start()){\r\n    $thread->wait();\r\n}\r\n?>\r\n```\r\nThreading in PHP should be and will be easy, and there's not much to know other than this:\r\n\r\n* You cannot share resources or objects among threads\r\n* The run method has a special scope: anything you set as a member in your constructor is available in run() without referencing $this\r\n* Whatever run returns is returned when wait() is called, again, you cannot return resources or objects from run methods\r\n\r\nAt first this might seem quite restrictive, with simplicity in mind: copying resources and class entries from other contexts is fraught with trouble, TSRM does a great job of keeping PHP thread safe, the implementation will be more stable if we do not ask it to do things that it simply doesn't want to do, like allow multiple threads to access the same resources concurrently. In the real world the above things actually just simplify usage and to a degree implementation. It's also worth mentioning that any function or method from any extension will run **exactly** the same inside a thread, which saves me a billion hours of testing and saves you from errors.\r\nIf you have read this far and are still thinking \"but how will I send asynchronous MySQL queries if I cannot pass resources for a thread to use?\", then frankly I am disappointed: the simplest solution is always the best ... I'll spell it out: you do not need to pass resources between threads because you can pass the parameters that create them and create the resources in the thread scope, in the case of MySQL you might even consider using persistent connections.\r\n\r\n### Features\r\nThreads on their own are of limited use in the real world. You need to be able to organize and synchronize your instructions in a multi-threaded application in any language. To that end Mutex's are available.\r\nMore features are planned but not yet ready:\r\n* Events\r\n* Conditions\r\n* Thread Groups\r\n* Sharing Variables during Runtime\r\nIn time everything above will become ready, and I'll no doubt add to the list as I receive feedback from y'all.","name":"pthreads"}